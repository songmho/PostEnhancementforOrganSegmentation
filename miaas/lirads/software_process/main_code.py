"""
Date: 2020. 10. 13.
Programmer: MH
Description: Code for main of software process
"""
import copy
import shutil
import time

from software_process.step1 import LiverRegionSegmentor, LiverSegmentDetector
from software_process.step2 import LesionSegmentor
import numpy as np
import cv2
import os

points = {"Plain": {"000001": {'x': [], 'y': []}, '000002': {'x': [], 'y': []}, '000003': {'x': [], 'y': []}, '000004': {'x': [], 'y': []}, '000005': {'x': [], 'y': []}, '000006': {'x': [], 'y': []}, '000007': {'x': [], 'y': []}, '000008': {'x': [], 'y': []}, '000009': {'x': [], 'y': []}, '000010': {'x': [], 'y': []}, '000011': {'x': [], 'y': []}, '000012': {'x': [], 'y': []}, '000013': {'x': [185, 176, 166, 164, 152, 143, 138, 141, 149, 159, 173, 176, 171, 179, 191], 'y': [280, 276, 276, 266, 253, 248, 248, 241, 235, 231, 237, 248, 252, 261, 268]}, '000014': {'x': [183, 180, 171, 163, 161, 159, 157, 143, 133, 129, 133, 149, 171, 187, 189, 195, 198, 191, 183], 'y': [283, 278, 277, 281, 282, 273, 267, 260, 256, 247, 233, 225, 217, 214, 231, 251, 265, 275, 280]}, '000015': {'x': [183, 170, 161, 154, 154, 153, 145, 137, 127, 123, 123, 131, 147, 162, 183, 205, 206, 190, 187], 'y': [285, 282, 283, 285, 283, 277, 271, 270, 263, 253, 232, 221, 214, 207, 215, 229, 249, 279, 282]}, '000016': {'x': [149, 159, 171, 186, 193, 203, 213, 214, 209, 199, 191, 173, 150, 129, 119, 116, 118, 127, 135, 146], 'y': [292, 287, 285, 288, 283, 271, 265, 254, 235, 220, 211, 206, 205, 209, 224, 237, 259, 280, 281, 285]}, '000017': {'x': [118, 133, 140, 153, 166, 182, 193, 213, 223, 234, 218, 202, 176, 127, 116, 107, 111], 'y': [276, 291, 301, 294, 290, 285, 281, 269, 267, 265, 241, 212, 203, 203, 229, 243, 265]}, '000018': {'x': [130, 175, 187, 210, 238, 232, 234, 225, 197, 162, 129, 110, 99, 103, 110], 'y': [301, 295, 293, 295, 284, 272, 261, 247, 209, 195, 204, 219, 255, 283, 297]}, '000019': {'x': [121, 161, 189, 210, 234, 235, 230, 235, 240, 241, 233, 219, 204, 189, 176, 147, 125, 106, 95, 94, 102], 'y': [313, 303, 297, 294, 286, 273, 267, 258, 243, 213, 189, 185, 193, 201, 201, 198, 203, 220, 249, 285, 306]}, '000020': {'x': [92, 117, 130, 158, 185, 201, 222, 242, 251, 266, 259, 252, 233, 200, 181, 159, 139, 117, 101, 95, 88], 'y': [300, 323, 325, 312, 297, 295, 295, 278, 269, 260, 231, 199, 180, 190, 193, 197, 193, 205, 225, 248, 275]}, '000021': {'x': [85, 99, 134, 157, 179, 199, 226, 242, 253, 267, 270, 261, 253, 239, 229, 218, 194, 185, 165, 151, 131, 110, 98, 85, 83], 'y': [301, 325, 333, 312, 303, 298, 294, 281, 272, 257, 239, 209, 195, 184, 187, 184, 184, 189, 189, 191, 195, 207, 227, 250, 279]}, '000022': {'x': [88, 102, 131, 158, 183, 197, 213, 235, 250, 269, 286, 299, 305, 310, 314, 322, 330, 321, 309, 283, 264, 245, 219, 202, 189, 175, 154, 129, 109, 87, 78, 78], 'y': [331, 341, 337, 322, 307, 299, 296, 288, 278, 271, 265, 262, 251, 233, 221, 209, 198, 187, 180, 182, 186, 186, 186, 185, 189, 191, 192, 193, 205, 239, 265, 303]}, '000023': {'x': [79, 82, 101, 139, 161, 187, 209, 226, 247, 259, 271, 278, 291, 302, 306, 314, 323, 326, 313, 281, 246, 225, 190, 165, 137, 121, 104, 93, 73, 75, 77], 'y': [307, 337, 351, 341, 327, 307, 296, 293, 283, 275, 272, 271, 264, 248, 231, 215, 203, 193, 183, 178, 180, 183, 185, 188, 189, 197, 215, 237, 257, 284, 310]}, '000024': {'x': [75, 94, 121, 151, 179, 202, 222, 247, 253, 275, 299, 315, 323, 320, 299, 271, 242, 215, 194, 169, 138, 117, 100, 91, 74, 71, 73], 'y': [338, 358, 356, 339, 315, 301, 295, 277, 258, 245, 229, 211, 195, 185, 184, 181, 181, 185, 183, 189, 189, 191, 211, 227, 252, 287, 313]}, '000025': {'x': [67, 73, 115, 158, 179, 205, 226, 250, 269, 290, 302, 306, 317, 312, 289, 254, 225, 200, 163, 128, 101, 79, 71], 'y': [289, 346, 361, 341, 321, 299, 289, 265, 248, 235, 219, 199, 189, 183, 183, 181, 186, 185, 185, 189, 202, 241, 266]}, '000026': {'x': [69, 63, 65, 81, 102, 138, 165, 189, 209, 227, 245, 254, 258, 275, 283, 291, 311, 329, 331, 316, 298, 262, 232, 199, 155, 124, 94, 74], 'y': [263, 296, 332, 356, 363, 357, 334, 318, 300, 291, 282, 267, 249, 238, 223, 210, 201, 192, 187, 181, 181, 181, 184, 184, 193, 193, 213, 243]}, '000027': {'x': [62, 61, 65, 71, 90, 121, 147, 169, 194, 210, 234, 242, 237, 253, 281, 301, 321, 329, 299, 259, 231, 205, 175, 153, 134, 107, 87], 'y': [264, 296, 340, 355, 367, 369, 358, 337, 317, 299, 289, 268, 255, 244, 226, 207, 191, 181, 181, 183, 181, 185, 185, 187, 187, 195, 221]}, '000028': {'x': [61, 59, 61, 79, 98, 137, 163, 182, 206, 226, 241, 251, 257, 270, 285, 298, 303, 298, 279, 249, 217, 179, 154, 126, 100], 'y': [256, 299, 338, 363, 375, 371, 361, 335, 311, 297, 285, 268, 243, 225, 211, 187, 171, 168, 172, 179, 180, 185, 190, 190, 195]}, '000029': {'x': [61, 55, 55, 55, 73, 93, 126, 146, 163, 185, 202, 215, 237, 245, 233, 207, 214, 230, 249, 270, 285, 297, 269, 239, 204, 162, 135, 113, 90, 71], 'y': [263, 284, 312, 337, 363, 374, 375, 371, 359, 338, 314, 304, 289, 270, 255, 251, 243, 244, 233, 211, 189, 175, 170, 183, 184, 188, 191, 193, 211, 234]}, '000030': {'x': [66, 57, 52, 59, 75, 95, 141, 167, 186, 202, 213, 234, 232, 242, 238, 230, 221, 215, 211, 217, 226, 238, 249, 257, 273, 287, 305, 293, 247, 214, 165, 132, 101, 80], 'y': [237, 270, 299, 356, 367, 377, 377, 361, 337, 321, 306, 295, 281, 271, 265, 264, 257, 257, 247, 236, 243, 241, 229, 218, 206, 189, 173, 170, 181, 183, 182, 189, 201, 214]}, '000031': {'x': [67, 83, 102, 125, 185, 231, 285, 301, 307, 289, 287, 272, 258, 242, 231, 222, 212, 214, 229, 241, 242, 234, 234, 231, 214, 202, 191, 178, 163, 151, 136, 117, 101, 80, 69, 59, 51, 50, 53], 'y': [233, 215, 192, 185, 186, 180, 173, 165, 177, 187, 199, 210, 221, 227, 240, 245, 237, 251, 255, 263, 271, 278, 290, 296, 304, 318, 338, 353, 366, 372, 377, 378, 381, 380, 367, 352, 319, 294, 279]}, '000032': {'x': [57, 61, 77, 101, 142, 169, 189, 197, 210, 222, 245, 253, 240, 239, 236, 237, 238, 233, 234, 245, 265, 279, 291, 301, 293, 271, 242, 215, 185, 166, 129, 107, 72, 65, 57, 53], 'y': [327, 359, 369, 383, 380, 370, 354, 339, 318, 303, 288, 283, 284, 284, 280, 267, 257, 247, 236, 224, 211, 199, 185, 174, 165, 169, 175, 179, 179, 187, 181, 197, 225, 245, 269, 311]}, '000033': {'x': [57, 68, 92, 125, 169, 201, 229, 234, 235, 231, 220, 244, 262, 284, 297, 288, 238, 214, 188, 153, 110, 91, 77, 65, 57], 'y': [329, 366, 380, 387, 374, 345, 302, 293, 277, 259, 241, 228, 220, 196, 172, 165, 178, 178, 185, 185, 192, 202, 222, 248, 291]}, '000034': {'x': [53, 62, 79, 95, 133, 170, 194, 205, 222, 231, 233, 234, 236, 225, 225, 243, 269, 283, 287, 270, 249, 223, 204, 183, 167, 136, 115, 94, 75, 55, 51, 49], 'y': [335, 362, 381, 382, 385, 375, 357, 333, 306, 289, 279, 265, 255, 245, 237, 223, 201, 186, 178, 176, 176, 184, 183, 179, 179, 185, 188, 206, 225, 257, 288, 318]}, '000035': {'x': [46, 63, 71, 94, 145, 187, 204, 219, 234, 234, 237, 237, 229, 221, 225, 253, 282, 279, 291, 280, 254, 237, 217, 208, 187, 146, 93, 86, 63, 51], 'y': [318, 352, 367, 381, 386, 359, 335, 313, 295, 281, 274, 258, 249, 241, 229, 212, 199, 187, 170, 161, 175, 181, 181, 181, 181, 181, 200, 217, 245, 285]}, '000036': {'x': [88, 117, 166, 198, 206, 213, 222, 239, 233, 230, 232, 223, 203, 166, 163, 187, 198, 213, 227, 241, 271, 262, 245, 221, 208, 195, 166, 149, 127, 106, 86, 71, 61, 53, 54, 63], 'y': [377, 388, 379, 354, 326, 305, 298, 282, 270, 261, 252, 238, 231, 232, 229, 222, 215, 213, 217, 204, 178, 168, 176, 180, 181, 179, 179, 181, 188, 203, 225, 240, 275, 306, 338, 359]}, '000037': {'x': [55, 89, 134, 190, 202, 207, 207, 217, 227, 231, 224, 215, 213, 222, 229, 227, 216, 202, 189, 157, 166, 174, 193, 214, 241, 253, 261, 271, 261, 245, 223, 215, 199, 175, 152, 127, 91, 65, 53], 'y': [343, 385, 390, 367, 340, 307, 295, 295, 288, 279, 271, 270, 268, 265, 259, 247, 229, 229, 229, 239, 229, 223, 216, 213, 210, 201, 193, 175, 171, 177, 183, 182, 180, 180, 183, 185, 209, 246, 307]}, '000038': {'x': [90, 134, 171, 194, 205, 210, 218, 226, 233, 222, 225, 235, 235, 213, 183, 191, 193, 199, 210, 226, 245, 257, 270, 258, 226, 211, 194, 165, 134, 101, 85, 62, 57, 62, 75], 'y': [381, 391, 381, 362, 340, 310, 297, 293, 279, 270, 265, 259, 244, 237, 243, 231, 219, 211, 209, 209, 199, 187, 177, 173, 185, 181, 181, 182, 183, 198, 223, 258, 299, 335, 364]}, '000039': {'x': [65, 86, 114, 161, 186, 194, 194, 189, 184, 184, 183, 155, 158, 175, 189, 194, 202, 213, 226, 241, 251, 263, 271, 257, 231, 217, 199, 183, 135, 108, 91, 55, 57], 'y': [349, 377, 389, 383, 369, 346, 321, 291, 268, 252, 241, 240, 225, 219, 213, 211, 207, 207, 209, 205, 196, 185, 177, 171, 182, 183, 181, 180, 184, 197, 218, 286, 313]}, '000040': {'x': [57, 71, 86, 121, 169, 185, 191, 197, 192, 189, 183, 168, 161, 181, 186, 182, 197, 209, 221, 239, 257, 274, 255, 235, 224, 213, 197, 177, 142, 118, 91, 71, 57, 54], 'y': [327, 358, 379, 393, 389, 375, 354, 329, 308, 273, 256, 247, 239, 239, 224, 211, 207, 200, 205, 199, 185, 172, 173, 183, 183, 183, 182, 180, 186, 195, 217, 243, 275, 298]}, '000041': {'x': [64, 83, 97, 131, 159, 181, 186, 194, 193, 193, 192, 186, 173, 165, 178, 187, 176, 185, 195, 203, 217, 233, 245, 257, 270, 253, 240, 230, 217, 215, 199, 180, 159, 133, 102, 79, 67, 58], 'y': [345, 373, 385, 394, 391, 378, 362, 346, 325, 303, 279, 266, 246, 237, 235, 230, 218, 216, 213, 205, 199, 197, 193, 186, 175, 174, 177, 185, 186, 186, 184, 178, 184, 193, 205, 238, 272, 305]}, '000042': {'x': [61, 75, 99, 129, 161, 177, 190, 197, 190, 193, 183, 176, 169, 179, 183, 186, 205, 217, 231, 246, 251, 250, 239, 227, 214, 202, 198, 178, 148, 106, 76, 65, 53, 54], 'y': [330, 355, 380, 394, 391, 379, 363, 348, 323, 290, 268, 253, 241, 233, 222, 214, 203, 197, 197, 192, 184, 177, 178, 179, 182, 183, 180, 173, 175, 205, 228, 260, 291, 319]}, '000043': {'x': [61, 82, 106, 133, 158, 187, 193, 209, 217, 213, 201, 189, 186, 179, 179, 173, 173, 177, 180, 178, 187, 198, 204, 190, 177, 158, 115, 85, 63, 55, 57], 'y': [338, 367, 387, 397, 392, 381, 367, 343, 318, 295, 287, 280, 280, 267, 251, 247, 243, 233, 224, 214, 207, 208, 193, 175, 171, 179, 199, 227, 261, 289, 320]}, '000044': {'x': [54, 71, 94, 123, 154, 174, 181, 179, 175, 172, 173, 178, 172, 173, 179, 179, 192, 205, 197, 183, 163, 141, 112, 93, 78, 62, 58], 'y': [312, 356, 381, 393, 396, 379, 365, 340, 315, 296, 281, 261, 249, 233, 217, 209, 203, 196, 186, 175, 175, 184, 195, 208, 234, 264, 289]}, '000045': {'x': [73, 109, 147, 163, 173, 174, 173, 170, 169, 176, 174, 174, 167, 170, 171, 177, 178, 198, 198, 193, 182, 168, 138, 127, 106, 94, 82, 71, 59, 59, 62], 'y': [361, 389, 398, 385, 371, 351, 330, 313, 301, 292, 275, 259, 248, 241, 231, 220, 211, 197, 184, 179, 177, 177, 185, 187, 196, 205, 227, 256, 280, 305, 331]}, '000046': {'x': [67, 85, 118, 139, 158, 171, 172, 167, 165, 165, 174, 175, 166, 162, 169, 174, 173, 182, 189, 198, 200, 189, 179, 163, 113, 98, 75, 69, 61, 59], 'y': [337, 364, 383, 397, 388, 375, 360, 340, 324, 304, 293, 280, 257, 240, 235, 221, 212, 201, 198, 191, 187, 178, 175, 173, 190, 208, 224, 251, 284, 316]}, '000047': {'x': [97, 129, 151, 169, 169, 164, 155, 161, 160, 161, 171, 164, 160, 162, 171, 173, 174, 181, 195, 193, 176, 149, 129, 113, 89, 82, 77, 69, 71, 83, 87], 'y': [377, 391, 387, 379, 362, 349, 327, 312, 295, 286, 280, 265, 247, 238, 233, 215, 207, 200, 195, 184, 178, 178, 184, 195, 223, 255, 276, 296, 327, 354, 366]}, '000048': {'x': [75, 97, 125, 146, 159, 167, 156, 155, 159, 157, 160, 155, 166, 170, 173, 174, 186, 193, 181, 140, 113, 86, 76, 73, 67], 'y': [350, 379, 390, 389, 379, 373, 348, 313, 295, 271, 250, 240, 239, 225, 208, 201, 197, 189, 177, 187, 197, 227, 263, 303, 331]}, '000049': {'x': [74, 98, 123, 146, 161, 157, 148, 147, 157, 149, 147, 150, 158, 159, 167, 171, 173, 179, 194, 205, 219, 141, 113, 78, 71, 63, 65], 'y': [349, 375, 382, 390, 381, 367, 345, 331, 316, 297, 285, 267, 254, 240, 231, 213, 204, 199, 191, 183, 173, 189, 195, 239, 275, 310, 329]}, '000050': {'x': [62, 84, 115, 145, 150, 142, 140, 138, 143, 146, 156, 163, 171, 172, 169, 172, 192, 215, 139, 99, 85, 76, 68], 'y': [333, 360, 385, 386, 375, 355, 328, 309, 286, 266, 252, 241, 229, 216, 201, 194, 186, 174, 179, 210, 222, 245, 271]}, '000051': {'x': [108, 140, 168, 198, 208, 175, 174, 177, 165, 151, 142, 140, 136, 141, 143, 146, 141, 123, 108, 87, 71, 64, 73, 88], 'y': [206, 185, 179, 181, 184, 197, 219, 229, 244, 253, 260, 280, 310, 341, 364, 373, 381, 384, 373, 351, 318, 287, 253, 220]}, '000052': {'x': [91, 79, 73, 64, 63, 70, 123, 143, 150, 139, 136, 135, 135, 132, 136, 142, 144, 153, 160, 167, 168, 169, 167, 173, 194, 164, 129], 'y': [216, 232, 260, 281, 305, 333, 381, 381, 376, 353, 330, 315, 300, 293, 283, 267, 253, 243, 243, 226, 216, 205, 196, 183, 182, 180, 192]}, '000053': {'x': [98, 124, 162, 173, 171, 171, 161, 146, 141, 136, 135, 135, 136, 136, 137, 136, 112, 83, 68, 65, 67, 65, 79], 'y': [209, 194, 183, 194, 213, 231, 243, 246, 262, 285, 299, 311, 330, 356, 369, 383, 381, 366, 343, 321, 287, 267, 236]}, '000054': {'x': [79, 64, 65, 76, 87, 105, 126, 138, 128, 126, 130, 138, 142, 148, 157, 165, 170, 177, 161, 141, 113, 94], 'y': [234, 289, 311, 341, 360, 374, 373, 368, 346, 320, 289, 267, 249, 241, 237, 223, 200, 188, 186, 190, 202, 216]}, '000055': {'x': [168, 167, 173, 177, 157, 120, 85, 69, 70, 69, 124, 140, 129, 121, 125, 136, 144], 'y': [234, 220, 207, 188, 182, 199, 229, 261, 293, 327, 374, 373, 354, 320, 281, 257, 243]}, '000056': {'x': [143, 137, 136, 132, 127, 134, 134, 115, 89, 75, 58, 60, 70, 77, 88, 112, 132, 148, 164, 171, 173, 168, 162], 'y': [241, 254, 274, 293, 322, 362, 374, 374, 358, 339, 314, 284, 260, 235, 218, 204, 193, 186, 191, 203, 217, 232, 239]}, '000057': {'x': [143, 159, 174, 178, 165, 148, 123, 93, 74, 66, 75, 89, 109, 124, 129, 122, 123, 128, 135], 'y': [241, 235, 214, 195, 191, 193, 203, 217, 250, 285, 331, 354, 371, 370, 358, 330, 311, 288, 263]}, '000058': {'x': [71, 79, 93, 110, 122, 127, 124, 125, 129, 139, 142, 151, 160, 170, 176, 177, 170, 142, 116, 99, 85, 73, 65], 'y': [321, 334, 359, 367, 369, 351, 318, 292, 264, 241, 229, 234, 236, 224, 206, 194, 187, 189, 200, 215, 237, 268, 293]}, '000059': {'x': [74, 69, 68, 72, 98, 117, 121, 121, 119, 126, 129, 136, 144, 150, 163, 169, 151, 129, 99, 81, 75], 'y': [262, 285, 313, 338, 355, 361, 354, 316, 296, 266, 247, 227, 207, 196, 193, 186, 184, 200, 214, 240, 262]}, '000060': {'x': [74, 71, 70, 91, 104, 111, 120, 121, 121, 123, 128, 136, 146, 154, 151, 130, 107, 74], 'y': [256, 287, 316, 351, 356, 357, 345, 322, 296, 272, 240, 225, 206, 193, 189, 198, 219, 258]}, '000061': {'x': [71, 72, 78, 89, 104, 114, 120, 117, 118, 139, 144, 149, 140, 118, 82, 78], 'y': [292, 304, 322, 344, 352, 350, 337, 309, 280, 228, 207, 195, 190, 211, 248, 276]}, '000062': {'x': [80, 73, 75, 91, 104, 114, 118, 115, 126, 139, 149, 118, 88, 78], 'y': [251, 281, 309, 340, 349, 344, 324, 294, 251, 218, 195, 201, 232, 254]}, '000063': {'x': [93, 79, 73, 79, 94, 110, 112, 112, 110, 123, 130, 140, 143, 133, 106], 'y': [231, 260, 289, 320, 342, 345, 335, 315, 293, 262, 238, 219, 201, 194, 214]}, '000064': {'x': [99, 113, 131, 139, 140, 127, 119, 115, 111, 113, 101, 91, 77, 77, 80, 92], 'y': [228, 217, 202, 205, 234, 258, 275, 294, 320, 341, 344, 335, 315, 289, 257, 238]}, '000065': {'x': [95, 78, 77, 82, 103, 110, 110, 114, 122, 130, 141, 143, 137, 119, 98], 'y': [230, 260, 293, 325, 339, 330, 307, 279, 258, 242, 230, 215, 207, 206, 227]}, '000066': {'x': [97, 115, 133, 140, 137, 115, 112, 109, 101, 80, 81, 83], 'y': [232, 215, 207, 213, 234, 281, 302, 321, 331, 313, 279, 255]}, '000067': {'x': [89, 97, 115, 132, 142, 131, 127, 119, 114, 111, 105, 107, 95, 82, 86, 81], 'y': [254, 233, 216, 211, 211, 236, 247, 260, 279, 292, 309, 325, 330, 313, 282, 263]}, '000068': {'x': [90, 82, 80, 85, 102, 106, 110, 117, 126, 136, 142, 123, 97, 87], 'y': [256, 277, 297, 314, 326, 311, 293, 272, 245, 222, 213, 214, 236, 256]}, '000069': {'x': [90, 83, 83, 94, 100, 110, 112, 122, 134, 143, 114, 93], 'y': [257, 277, 293, 319, 322, 308, 285, 260, 228, 213, 230, 254]}, '000070': {'x': [88, 88, 84, 99, 109, 114, 117, 132, 136, 105], 'y': [255, 278, 300, 317, 288, 273, 256, 234, 218, 237]}, '000071': {'x': [91, 100, 110, 123, 131, 127, 119, 110, 103, 97, 93, 93], 'y': [268, 253, 233, 221, 221, 241, 259, 279, 293, 307, 298, 281]}, '000072': {'x': [90, 97, 114, 121, 128, 114, 111, 99, 94], 'y': [282, 257, 240, 228, 234, 255, 272, 296, 293]}, '000073': {'x': [93, 99, 108, 120, 114, 109, 91], 'y': [281, 264, 252, 245, 263, 274, 289]}, '000074': {'x': [], 'y': []}, '000075': {'x': [], 'y': []}, '000076': {'x': [], 'y': []}, '000077': {'x': [], 'y': []}, '000078': {'x': [], 'y': []}, '000079': {'x': [], 'y': []}, '000080': {'x': [], 'y': []}, '000081': {'x': [], 'y': []}, '000082': {'x': [], 'y': []}, '000083': {'x': [], 'y': []}, '000084': {'x': [], 'y': []}, '000085': {'x': [], 'y': []}, '000086': {'x': [], 'y': []}, '000087': {'x': [], 'y': []}, '000088': {'x': [], 'y': []}, '000089': {'x': [], 'y': []}, '000090': {'x': [], 'y': []}, '000091': {'x': [], 'y': []}, '000092': {'x': [], 'y': []}, '000093': {'x': [], 'y': []}, '000094': {'x': [], 'y': []}, '000095': {'x': [], 'y': []}, '000096': {'x': [], 'y': []}, '000097': {'x': [], 'y': []}, '000098': {'x': [], 'y': []}, '000099': {'x': [], 'y': []}, '000100': {'x': [], 'y': []}, '000101': {'x': [], 'y': []}, '000102': {'x': [], 'y': []}, '000103': {'x': [], 'y': []}},
 "Arterial": {'000001': {'x': [], 'y': []}, '000009': {'x': [], 'y': []}, '000017': {'x': [], 'y': []}, '000023': {'x': [], 'y': []}, '000031': {'x': [186, 162, 138, 123, 110, 103, 98, 99, 101, 109, 119, 127, 128, 136, 144, 154, 162, 166, 176, 185, 201, 207, 201, 199, 196, 196, 193], 'y': [225, 217, 217, 222, 234, 243, 262, 282, 298, 310, 315, 314, 322, 316, 309, 309, 303, 299, 301, 291, 277, 268, 261, 252, 243, 234, 225]}, '000039': {'x': [182, 162, 135, 110, 95, 85, 77, 74, 75, 93, 111, 135, 155, 165, 179, 188, 201, 225, 225, 227, 239, 245, 252, 260, 263, 257, 246, 227, 219, 197, 181], 'y': [210, 206, 205, 212, 228, 249, 273, 294, 320, 346, 351, 350, 338, 327, 319, 313, 313, 306, 301, 291, 289, 274, 258, 254, 246, 238, 229, 221, 213, 205, 209]}, '000043': {'x': [179, 195, 212, 229, 256, 282, 300, 308, 301, 295, 283, 255, 235, 222, 213, 195, 185, 161, 137, 102, 91, 75, 69, 71, 69, 64, 68, 75, 91, 111, 137], 'y': [202, 199, 193, 191, 205, 213, 225, 231, 248, 276, 280, 271, 289, 303, 311, 315, 320, 347, 355, 373, 374, 363, 349, 339, 318, 295, 274, 247, 225, 209, 199]}, '000049': {'x': [102, 123, 147, 171, 189, 186, 217, 221, 239, 267, 287, 295, 306, 308, 305, 303, 293, 265, 247, 239, 231, 223, 207, 193, 178, 170, 157, 137, 126, 99, 85, 70, 59, 54, 55, 55, 54, 54, 57, 66, 79], 'y': [205, 198, 195, 196, 194, 187, 189, 189, 191, 191, 191, 191, 204, 216, 226, 233, 241, 256, 281, 295, 297, 305, 314, 324, 341, 353, 367, 381, 387, 393, 393, 381, 367, 349, 335, 317, 303, 287, 270, 246, 226]}, '000057': {'x': [58, 65, 77, 92, 122, 157, 189, 241, 262, 293, 313, 324, 317, 310, 303, 294, 289, 273, 249, 239, 233, 237, 239, 238, 235, 237, 235, 223, 201, 190, 182, 169, 158, 149, 130, 114, 102, 91, 85, 73, 66, 59, 53, 47, 46, 43, 47, 48, 51], 'y': [255, 238, 223, 210, 198, 194, 194, 189, 185, 186, 189, 190, 197, 202, 215, 227, 234, 241, 255, 261, 266, 274, 285, 289, 291, 297, 305, 312, 337, 353, 366, 381, 389, 393, 400, 402, 404, 405, 401, 397, 390, 379, 366, 349, 343, 326, 291, 282, 267]}, '000065': {'x': [77, 63, 55, 46, 39, 41, 41, 44, 48, 53, 65, 73, 85, 98, 131, 151, 189, 203, 222, 247, 267, 279, 293, 309, 317, 307, 305, 295, 291, 289, 285, 281, 273, 265, 255, 250, 242, 241, 234, 223, 214, 206, 207, 209, 215, 225, 243, 243, 243, 242, 234, 229, 226, 226, 226, 226, 221, 215, 211, 210, 209, 203, 201, 193, 178, 171, 157, 146, 138, 117, 101], 'y': [399, 386, 371, 347, 335, 319, 294, 273, 259, 249, 234, 223, 211, 201, 195, 195, 195, 191, 190, 186, 183, 181, 181, 181, 183, 186, 191, 195, 203, 211, 217, 225, 227, 229, 231, 233, 239, 246, 251, 254, 253, 246, 251, 257, 261, 264, 271, 273, 276, 281, 281, 283, 283, 289, 295, 305, 309, 316, 321, 329, 337, 347, 353, 362, 387, 391, 397, 401, 404, 405, 407]}, '000071': {'x': [93, 80, 69, 63, 54, 43, 38, 39, 41, 41, 48, 56, 69, 82, 101, 115, 129, 143, 161, 180, 191, 201, 217, 245, 256, 273, 293, 297, 301, 294, 287, 282, 283, 275, 271, 266, 261, 257, 250, 243, 234, 223, 215, 210, 205, 198, 186, 191, 201, 215, 203, 207, 211, 222, 227, 222, 217, 203, 202, 206, 206, 205, 205, 205, 203, 201, 193, 185, 174, 165, 141, 133, 125, 111, 103, 89], 'y': [407, 401, 394, 386, 371, 351, 326, 309, 287, 277, 258, 241, 230, 218, 205, 197, 190, 187, 189, 189, 189, 190, 193, 187, 185, 181, 174, 173, 179, 185, 192, 198, 204, 210, 216, 223, 223, 223, 223, 229, 239, 247, 247, 246, 245, 238, 239, 245, 247, 253, 265, 269, 270, 277, 288, 301, 307, 307, 316, 323, 328, 333, 343, 355, 363, 369, 381, 388, 395, 401, 411, 411, 412, 413, 413, 409]}, '000079': {'x': [141, 158, 173, 182, 187, 194, 197, 199, 195, 191, 185, 182, 182, 186, 198, 213, 223, 218, 211, 193, 178, 173, 163, 157, 154, 143, 150, 165, 175, 185, 192, 197, 206, 221, 230, 247, 257, 265, 270, 279, 285, 283, 278, 255, 250, 237, 225, 218, 209, 201, 195, 193, 171, 162, 151, 146, 143, 126, 98, 87, 65, 55, 46, 45, 42, 45, 49, 61, 67, 84, 117], 'y': [418, 414, 406, 395, 385, 375, 357, 338, 318, 305, 298, 282, 278, 269, 269, 263, 258, 247, 241, 241, 252, 257, 257, 257, 251, 250, 242, 234, 233, 229, 225, 222, 222, 223, 219, 215, 211, 207, 202, 194, 185, 179, 174, 185, 187, 190, 191, 191, 192, 192, 192, 183, 187, 189, 191, 191, 191, 191, 205, 214, 233, 253, 278, 290, 307, 323, 342, 371, 383, 397, 416]}, '000083': {'x': [79, 96, 119, 135, 153, 169, 180, 193, 204, 219, 233, 249, 266, 277, 274, 273, 242, 210, 197, 187, 183, 185, 180, 181, 181, 181, 177, 177, 181, 181, 190, 189, 207, 209, 205, 199, 194, 191, 187, 185, 178, 163, 151, 137, 117, 95, 78, 70, 61, 55, 49, 45, 41, 41, 48, 59], 'y': [219, 211, 203, 197, 191, 187, 186, 186, 191, 192, 192, 191, 187, 185, 193, 201, 212, 216, 219, 220, 221, 229, 237, 247, 247, 257, 261, 272, 281, 303, 319, 313, 337, 349, 360, 364, 367, 371, 382, 394, 403, 411, 418, 419, 413, 407, 395, 386, 375, 365, 345, 327, 310, 294, 270, 253]}, '000089': {'x': [53, 45, 41, 40, 41, 49, 55, 61, 73, 85, 115, 142, 155, 167, 179, 181, 181, 175, 171, 172, 176, 175, 175, 173, 169, 169, 172, 175, 175, 179, 186, 193, 196, 191, 187, 187, 199, 217, 202, 167, 160, 140, 114, 97, 73], 'y': [260, 274, 289, 306, 329, 346, 366, 373, 385, 397, 411, 414, 411, 402, 391, 382, 372, 342, 337, 321, 306, 295, 278, 271, 260, 254, 244, 238, 231, 225, 218, 214, 212, 204, 197, 190, 183, 175, 175, 189, 189, 190, 197, 213, 231]}, '000097': {'x': [101, 124, 143, 166, 179, 190, 187, 177, 161, 161, 156, 151, 155, 157, 152, 149, 149, 149, 150, 153, 157, 161, 159, 147, 131, 113, 101, 83, 67, 53, 44, 45, 43, 45, 50, 65, 81], 'y': [210, 203, 194, 189, 186, 195, 206, 215, 222, 239, 251, 262, 273, 287, 299, 306, 319, 337, 359, 377, 383, 393, 402, 405, 406, 407, 403, 387, 375, 357, 330, 317, 302, 285, 267, 245, 223]}, '000105': {'x': [78, 95, 121, 149, 173, 182, 173, 160, 155, 161, 154, 152, 152, 145, 141, 138, 130, 129, 131, 132, 139, 143, 146, 146, 139, 123, 114, 103, 91, 87, 80, 72, 67, 61, 56, 52, 49, 49, 49, 49, 49, 51, 58, 68, 79], 'y': [233, 218, 203, 193, 189, 195, 203, 211, 211, 222, 235, 255, 261, 274, 282, 295, 307, 322, 335, 351, 379, 389, 395, 401, 406, 405, 405, 400, 394, 391, 383, 375, 367, 363, 351, 337, 327, 316, 307, 295, 283, 268, 247, 237, 228]}, '000111': {'x': [83, 71, 64, 59, 53, 53, 53, 52, 53, 61, 65, 75, 91, 98, 107, 123, 135, 140, 136, 129, 129, 127, 125, 124, 123, 125, 124, 125, 119, 125, 127, 127, 129, 134, 143, 153, 161, 166, 167, 165, 161, 150, 131, 111, 97], 'y': [230, 238, 251, 272, 283, 295, 309, 323, 334, 349, 362, 370, 386, 394, 397, 398, 398, 395, 391, 382, 374, 367, 361, 349, 347, 341, 335, 326, 319, 309, 299, 289, 276, 264, 260, 253, 247, 233, 220, 211, 205, 200, 201, 211, 218]}, '000119': {'x': [83, 61, 59, 57, 57, 61, 65, 73, 81, 92, 103, 113, 115, 113, 115, 113, 115, 115, 119, 125, 127, 130, 133, 137, 150, 163, 171, 175, 170, 168, 185, 174, 157, 125, 112], 'y': [231, 269, 285, 305, 319, 334, 349, 361, 373, 381, 381, 377, 372, 363, 350, 339, 323, 309, 296, 270, 262, 255, 241, 246, 246, 243, 231, 213, 205, 203, 197, 195, 195, 203, 209]}, '000123': {'x': [78, 68, 60, 57, 60, 67, 83, 93, 109, 114, 109, 111, 111, 108, 109, 112, 115, 117, 122, 125, 128, 129, 134, 135, 139, 143, 155, 170, 182, 188, 181, 171, 163, 157, 139, 127, 121, 111, 101, 85], 'y': [241, 265, 282, 309, 327, 353, 369, 377, 375, 367, 358, 347, 337, 329, 319, 307, 297, 290, 271, 259, 246, 239, 234, 224, 212, 209, 208, 206, 201, 198, 195, 195, 195, 197, 199, 203, 203, 206, 215, 230]}, '000131': {'x': [89, 94, 111, 132, 146, 161, 153, 143, 136, 131, 134, 131, 127, 127, 130, 127, 123, 117, 114, 115, 112, 111, 111, 111, 110, 106, 103, 103, 103, 104, 102, 93, 83, 71, 67, 65, 65, 69, 79], 'y': [237, 224, 214, 204, 201, 201, 207, 213, 215, 219, 226, 237, 249, 257, 263, 266, 261, 265, 277, 282, 286, 291, 295, 303, 309, 315, 319, 330, 345, 355, 363, 366, 357, 339, 327, 314, 292, 273, 255]}, '000137': {'x': [75, 71, 69, 73, 80, 89, 97, 101, 100, 99, 104, 104, 107, 113, 122, 124, 129, 127, 129, 125, 115, 96, 87, 81, 77], 'y': [270, 285, 307, 327, 345, 353, 348, 337, 327, 312, 305, 297, 286, 270, 257, 244, 237, 231, 223, 218, 217, 225, 233, 247, 259]}, '000145': {'x': [80, 77, 81, 85, 92, 97, 99, 100, 101, 107, 107, 108, 113, 116, 121, 124, 123, 110, 91, 84], 'y': [285, 305, 322, 331, 333, 326, 318, 311, 303, 297, 289, 279, 263, 254, 243, 236, 221, 229, 235, 261]}, '000153': {'x': [89, 93, 99, 99, 104, 105, 103, 95, 83, 85], 'y': [307, 305, 293, 283, 268, 261, 255, 265, 291, 298]}, '000159': {'x': [], 'y': []}, '000163': {'x': [], 'y': []}, '000171': {'x': [], 'y': []}, '000177': {'x': [], 'y': []}, '000185': {'x': [], 'y': []}, '000193': {'x': [], 'y': []}, '000199': {'x': [], 'y': []}, '000203': {'x': [], 'y': []}},
 "Venous": {'000001': {'x': [], 'y': []}, '000009': {'x': [], 'y': []}, '000017': {'x': [184, 172, 157, 144, 135, 113, 105, 101, 97, 95, 99, 109, 119, 125, 137, 146, 160, 175, 187, 203, 218, 221, 221, 230, 240, 257, 271, 277, 285, 292, 303, 304, 288, 275, 261, 243, 217, 206], 'y': [201, 199, 197, 197, 201, 214, 225, 237, 250, 271, 286, 299, 308, 309, 311, 304, 301, 295, 289, 291, 288, 283, 274, 267, 257, 252, 247, 239, 222, 209, 193, 185, 182, 185, 186, 188, 193, 193]}, '000023': {'x': [119, 141, 173, 205, 223, 241, 257, 265, 287, 304, 303, 297, 283, 255, 246, 239, 239, 237, 231, 224, 217, 201, 191, 177, 171, 155, 139, 121, 113, 105, 89, 83, 78, 73, 73, 74, 71, 75, 80, 95, 107], 'y': [198, 193, 189, 191, 187, 184, 185, 183, 187, 195, 199, 207, 221, 242, 245, 253, 261, 265, 275, 281, 287, 295, 302, 312, 323, 335, 343, 349, 351, 351, 348, 342, 334, 317, 303, 287, 267, 253, 239, 217, 204]}, '000031': {'x': [123, 135, 148, 165, 185, 205, 213, 221, 235, 241, 255, 266, 277, 282, 283, 275, 267, 261, 257, 253, 242, 234, 224, 215, 211, 207, 207, 207, 215, 223, 229, 235, 235, 230, 224, 218, 219, 222, 222, 221, 217, 215, 215, 211, 208, 203, 197, 190, 179, 175, 163, 147, 119, 101, 85, 72, 67, 65, 63, 61, 64, 70, 80], 'y': [191, 191, 191, 189, 186, 184, 183, 182, 179, 178, 179, 177, 176, 178, 183, 193, 202, 207, 211, 215, 220, 225, 231, 235, 236, 234, 237, 242, 245, 248, 253, 255, 260, 261, 262, 263, 269, 273, 281, 284, 288, 294, 299, 301, 303, 309, 321, 331, 343, 349, 357, 363, 367, 364, 359, 345, 336, 321, 309, 296, 275, 258, 239]}, '000039': {'x': [92, 88, 75, 69, 67, 69, 75, 88, 101, 117, 145, 169, 176, 184, 189, 193, 191, 188, 185, 181, 178, 169, 164, 166, 175, 183, 187, 181, 182, 187, 194, 197, 195, 187, 181, 173, 157, 141, 123], 'y': [209, 220, 239, 257, 284, 315, 335, 351, 365, 372, 374, 367, 361, 351, 339, 327, 309, 289, 272, 256, 245, 243, 241, 239, 239, 234, 228, 220, 218, 215, 209, 201, 195, 187, 181, 181, 185, 187, 195]}, '000043': {'x': [66, 75, 103, 119, 141, 155, 165, 173, 179, 179, 179, 177, 178, 178, 177, 178, 178, 175, 174, 179, 179, 174, 183, 194, 201, 202, 197, 197, 191, 183, 164, 140, 111, 95, 79, 69, 67], 'y': [310, 331, 365, 373, 375, 371, 364, 355, 345, 337, 327, 315, 300, 288, 271, 261, 252, 243, 237, 227, 213, 207, 203, 201, 198, 191, 191, 183, 183, 182, 187, 188, 198, 209, 233, 251, 282]}, '000049': {'x': [116, 137, 160, 177, 188, 185, 173, 171, 173, 171, 163, 157, 151, 153, 150, 148, 145, 146, 147, 146, 145, 147, 147, 151, 153, 155, 151, 143, 135, 131, 121, 115, 104, 93, 87, 81, 75, 71, 69, 69, 72, 74, 77, 81, 89], 'y': [199, 193, 189, 188, 187, 189, 195, 203, 211, 225, 240, 241, 248, 255, 262, 271, 274, 281, 290, 299, 311, 321, 331, 345, 352, 355, 360, 364, 365, 367, 361, 357, 353, 343, 332, 325, 315, 303, 290, 280, 267, 254, 243, 231, 221]}, '000057': {'x': [95, 86, 82, 78, 76, 75, 74, 79, 85, 99, 114, 120, 122, 126, 123, 124, 125, 127, 131, 133, 141, 143, 145, 149, 153, 152, 157, 149, 127, 107, 100], 'y': [225, 238, 247, 259, 271, 283, 295, 306, 323, 337, 347, 348, 349, 349, 336, 321, 304, 289, 275, 258, 250, 237, 228, 219, 211, 202, 196, 196, 203, 214, 219]}, '000065': {'x': [91, 86, 87, 87, 93, 98, 103, 111, 109, 114, 116, 121, 125, 125, 131, 131, 133, 139, 141, 145, 140, 127, 110, 100], 'y': [258, 275, 286, 295, 307, 319, 321, 317, 307, 291, 279, 269, 261, 255, 249, 244, 237, 227, 220, 213, 210, 216, 229, 241]}, '000071': {'x': [99, 103, 111, 119, 122, 122, 117, 116, 110, 106, 100], 'y': [271, 261, 249, 239, 245, 254, 257, 263, 273, 278, 279]}, '000079': {'x': [], 'y': []}, '000083': {'x': [], 'y': []}, '000089': {'x': [], 'y': []}, '000097': {'x': [], 'y': []}, '000105': {'x': [], 'y': []}, '000111': {'x': [], 'y': []}, '000119': {'x': [], 'y': []}, '000123': {'x': [], 'y': []}, '000131': {'x': [], 'y': []}, '000137': {'x': [], 'y': []}, '000145': {'x': [], 'y': []}, '000153': {'x': [], 'y': []}, '000159': {'x': [], 'y': []}, '000163': {'x': [], 'y': []}, '000171': {'x': [], 'y': []}, '000177': {'x': [], 'y': []}},
 "Delay": {'000001': {'x': [], 'y': []}, '000009': {'x': [], 'y': []}, '000017': {'x': [188, 208, 217, 225, 229, 214, 202, 188, 177, 165, 158, 149, 143, 136, 120, 109, 105, 109, 117, 133, 151], 'y': [207, 227, 238, 258, 267, 267, 278, 286, 290, 295, 303, 302, 306, 307, 299, 290, 266, 239, 217, 205, 203]}, '000023': {'x': [103, 94, 86, 81, 75, 73, 71, 71, 71, 73, 80, 83, 91, 102, 114, 120, 126, 133, 143, 149, 156, 164, 167, 175, 181, 185, 189, 195, 202, 215, 229, 235, 236, 239, 250, 258, 270, 296, 301, 300, 301, 303, 307, 312, 313, 311, 304, 306, 310, 305, 297, 291, 279, 275, 270, 265, 261, 253, 245, 235, 229, 221, 212, 195, 183, 163, 150, 133, 125], 'y': [209, 221, 236, 246, 263, 275, 287, 303, 317, 341, 343, 351, 357, 361, 365, 364, 359, 359, 355, 349, 346, 342, 337, 331, 328, 323, 319, 313, 307, 301, 296, 293, 285, 279, 275, 269, 266, 271, 273, 267, 259, 249, 241, 233, 230, 227, 223, 210, 205, 195, 187, 185, 188, 193, 195, 193, 191, 188, 187, 186, 186, 185, 185, 187, 190, 190, 190, 191, 191]}, '000031': {'x': [99, 117, 133, 155, 175, 194, 205, 228, 246, 263, 279, 297, 309, 297, 295, 287, 281, 272, 259, 247, 239, 225, 221, 213, 213, 218, 223, 234, 244, 250, 249, 244, 233, 232, 232, 232, 230, 226, 221, 217, 213, 204, 201, 195, 171, 157, 150, 141, 129, 110, 98, 87, 78, 73, 69, 63, 61, 59, 61, 61, 61, 61, 65, 67, 71, 75, 83, 91], 'y': [208, 196, 192, 191, 189, 189, 187, 185, 181, 182, 181, 181, 181, 193, 202, 209, 213, 224, 227, 235, 241, 244, 241, 242, 247, 252, 254, 256, 259, 264, 270, 274, 277, 282, 290, 298, 307, 308, 311, 313, 317, 335, 338, 351, 372, 381, 383, 384, 384, 385, 385, 379, 373, 367, 356, 342, 334, 315, 303, 291, 278, 270, 261, 254, 246, 237, 226, 217]}, '000035': {'x': [74, 83, 95, 110, 119, 135, 149, 163, 168, 180, 185, 200, 207, 215, 225, 233, 240, 245, 255, 263, 273, 283, 293, 297, 299, 297, 292, 286, 285, 283, 275, 268, 261, 255, 249, 239, 231, 224, 219, 213, 208, 215, 219, 223, 228, 239, 242, 234, 231, 230, 233, 233, 227, 215, 208, 205, 206, 207, 207, 201, 183, 178, 168, 159, 149, 140, 128, 118, 107, 93, 86, 79, 74, 66, 61, 60, 61, 61, 61, 61, 61, 62, 65], 'y': [233, 225, 214, 201, 195, 189, 188, 189, 193, 191, 187, 186, 185, 185, 184, 183, 182, 181, 180, 179, 179, 177, 177, 178, 182, 185, 190, 197, 200, 206, 214, 220, 223, 224, 224, 231, 236, 237, 237, 235, 241, 242, 247, 251, 253, 257, 268, 269, 271, 277, 283, 292, 297, 301, 302, 304, 321, 329, 344, 354, 375, 381, 384, 387, 390, 393, 393, 389, 387, 382, 380, 372, 364, 350, 339, 330, 319, 309, 299, 289, 281, 270, 259]}, '000041': {'x': [75, 68, 66, 63, 61, 58, 61, 63, 68, 78, 89, 95, 108, 123, 145, 159, 173, 181, 187, 191, 199, 202, 198, 201, 196, 195, 191, 189, 185, 177, 171, 159, 153, 154, 157, 168, 181, 189, 200, 202, 205, 210, 221, 233, 240, 249, 262, 267, 272, 275, 279, 276, 273, 269, 265, 264, 257, 255, 248, 241, 236, 233, 229, 224, 221, 217, 209, 200, 181, 173, 141, 122, 108, 95, 86], 'y': [239, 253, 264, 275, 289, 307, 319, 332, 345, 359, 379, 381, 390, 393, 397, 393, 386, 380, 371, 365, 357, 342, 330, 315, 301, 295, 288, 276, 267, 258, 251, 245, 241, 236, 231, 227, 224, 221, 218, 215, 213, 208, 208, 208, 207, 205, 203, 199, 195, 193, 187, 184, 181, 180, 180, 180, 182, 182, 184, 185, 185, 186, 187, 187, 187, 186, 185, 183, 183, 184, 191, 197, 207, 217, 224]}, '000049': {'x': [89, 93, 99, 106, 118, 128, 145, 156, 166, 183, 194, 200, 202, 205, 202, 199, 195, 190, 189, 183, 181, 177, 177, 178, 178, 179, 181, 181, 180, 177, 175, 173, 168, 166, 166, 166, 166, 167, 167, 167, 167, 167, 167, 169, 168, 165, 167, 166, 169, 179, 181, 183, 180, 172, 168, 165, 157, 157, 156, 156, 156, 155, 155, 154, 155, 161, 164, 164, 151, 147, 139, 132, 123, 114, 109, 103, 93, 86, 81, 77, 71, 68, 67, 65, 64, 69, 75, 79], 'y': [229, 223, 212, 205, 197, 193, 192, 189, 188, 187, 185, 185, 186, 189, 193, 195, 199, 201, 203, 206, 207, 209, 212, 216, 221, 224, 228, 231, 237, 239, 241, 245, 250, 252, 254, 255, 257, 259, 261, 263, 266, 268, 269, 274, 275, 276, 280, 283, 285, 286, 291, 295, 299, 303, 303, 303, 301, 303, 309, 315, 319, 328, 338, 349, 357, 369, 376, 380, 385, 387, 389, 391, 384, 380, 373, 368, 359, 353, 346, 337, 322, 317, 307, 292, 283, 262, 248, 239]}, '000055': {'x': [109, 93, 82, 76, 73, 70, 70, 77, 93, 105, 120, 138, 144, 141, 139, 137, 135, 133, 135, 135, 136, 137, 141, 143, 148, 149, 151, 150, 149, 151, 164, 171, 161, 149, 137, 122], 'y': [208, 222, 235, 252, 273, 290, 317, 335, 361, 374, 379, 380, 377, 368, 357, 349, 339, 328, 317, 307, 299, 293, 286, 272, 262, 254, 245, 229, 219, 201, 193, 190, 188, 191, 195, 200]}, '000063': {'x': [93, 97, 105, 108, 117, 129, 145, 155, 153, 153, 152, 147, 144, 140, 137, 134, 133, 132, 124, 121, 119, 116, 116, 118, 119, 115, 111, 106, 101, 99, 93, 87, 82, 79, 76, 75, 74, 74, 77, 84], 'y': [237, 233, 226, 219, 215, 211, 206, 201, 203, 209, 219, 229, 235, 247, 258, 263, 269, 274, 289, 298, 302, 311, 325, 344, 348, 353, 355, 355, 351, 347, 341, 337, 331, 321, 311, 300, 292, 282, 269, 254]}, '000067': {'x': [82, 81, 82, 85, 93, 101, 108, 111, 111, 111, 111, 120, 123, 128, 131, 132, 133, 135, 141, 145, 151, 149, 137, 127, 115, 101, 93, 91], 'y': [281, 294, 309, 323, 333, 339, 339, 333, 324, 310, 296, 282, 275, 266, 263, 257, 258, 253, 244, 233, 218, 207, 207, 215, 225, 237, 246, 251]}, '000073': {'x': [101, 97, 94, 91, 93, 95, 97, 104, 110, 119, 132, 133, 133, 133, 131, 127, 125, 117, 117, 115, 112, 108, 107, 104], 'y': [306, 306, 305, 292, 281, 271, 261, 252, 241, 233, 226, 229, 237, 241, 245, 249, 259, 274, 279, 284, 292, 298, 303, 304]}, '000081': {'x': [], 'y': []}, '000089': {'x': [], 'y': []}, '000095': {'x': [], 'y': []}, '000099': {'x': [], 'y': []}}
}

class LIRADSProcess:
    def __init__(self):
        self.liver_segmentor = LiverRegionSegmentor()
        self.liver_seg_detector = LiverSegmentDetector()
        self.lesion_segmentor = LesionSegmentor()

    def set_input_data(self, input):
        self.set_ct_a = input

    def get_sl(self, series_id, slice_id):
        """
        To return slice data labelled by series_id and slice_id
        :param series_id: int, series id of the slice
        :param slice_id: int, slice id of the slice
        :return:
        """
        sr_name = list(self.set_ct_a.keys())[series_id]
        sl_name = list(self.set_ct_a[sr_name].keys())[slice_id]
        sl = self.set_ct_a[sr_name][sl_name]

        return sl

    def proceed_step_1(self, set_ct_a):
        """
        To proceed step 1's tasks
        :param set_ct_a: dict, the dictionary of dictionaries consisting of CT slices
        :return: set_ct_b: dict, CT slices including liver region
                 set_ct_b_seg: dict, CT slices having segmented liver information (ROI, Mask, Confidence Value)
                 set_ct_b_liver_seg: dict, masks having Liver segments anatomy data
        """
        set_ct_b = {}
        set_ct_b_seg = {}
        self.set_ct_a = set_ct_a
        print("Task a is started.")
        set_ct_a_liver, set_ct_a_seg = self.proceed_task1_a(set_ct_a)
        try:
            shutil.rmtree("E:\\2. Project\\Python\\LiverDiseaseDetection\\process_result\\step1-a")
        except:
            pass
        os.mkdir("E:\\2. Project\\Python\\LiverDiseaseDetection\\process_result\\step1-a\\")
        for sr_name in list(set_ct_a_seg.keys()):
            # if os.path.isdir("E:\\2. Project\\Python\\LiverDiseaseDetection\\process_result\\step1-a\\"+sr_name):
            #     shutil.rmtree("E:\\2. Project\\Python\\LiverDiseaseDetection\\process_result\\step1-a\\"+sr_name)
            os.mkdir("E:\\2. Project\\Python\\LiverDiseaseDetection\\process_result\\step1-a\\"+sr_name)
            for sl_name in list(set_ct_a_seg[sr_name].keys()):
                print(sr_name, sl_name)
                cv2.imwrite("E:\\2. Project\\Python\\LiverDiseaseDetection\\process_result\\step1-a\\"+sr_name+"\\"+sl_name.split(".")[0]+".png", set_ct_a_liver[sr_name][sl_name])
                mask = set_ct_a_seg[sr_name][sl_name]['masks']
                mask = mask[:,:,0]
                mask = np.where(mask==True, 255, mask)
                mask = np.where(mask==False, 0, mask)
                mask = np.uint8(mask)
                result = set_ct_a_liver[sr_name][sl_name]
                ret, threshold = cv2.threshold(mask, 127, 255, cv2.THRESH_BINARY)
                contours_seg, _ = cv2.findContours(threshold, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
                print("# of Points in Contours of Segmentation: ", len(contours_seg))
                if len(contours_seg) == 1:
                    print("# of Points in Contours of Segmentation: ", len(contours_seg[0]))
                result = cv2.drawContours(result, contours_seg, -1, (0, 255, 0), 2)
                cv2.imwrite("E:\\2. Project\\Python\\LiverDiseaseDetection\\process_result\\step1-a\\"+sr_name+"\\"+sl_name.split(".")[0]+"_mask.png", result)

                sl_n = sl_name.split(".")[0]
                sr_n = sr_name.split(" ")[1]
                anno_mask = self.liver_segmentor.generate_mask_from_points(len(result), len(result[0]),
                                                                           points_x=points[sr_n][sl_n]["x"], points_y=points[sr_n][sl_n]["y"])
                ret, threshold = cv2.threshold(anno_mask, 127, 255, cv2.THRESH_BINARY)
                contours_anno, _ = cv2.findContours(threshold, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
                print("# of Points in Contours of Annotation: ", len(contours_anno))
                if len(contours_anno) == 1:
                    print("# of Points in Contours of Annotation: ", len(contours_anno[0]))
                result = cv2.drawContours(result, contours_anno, -1, (0, 0, 255), 2)
                dsc = self.liver_segmentor.compute_dice_coef(anno_mask, mask)
                hu_moment = self.liver_segmentor.compute_match_shape(contours_anno, contours_seg)
                cont_diff = self.liver_segmentor.compute_contour_difference(contours_anno, contours_seg)
                cv2.imwrite(
                    "E:\\2. Project\\Python\\LiverDiseaseDetection\\process_result\\step1-a\\" + sr_name + "\\" +
                    sl_name.split(".")[0] + "_mask_with_anno("+str(round(dsc, 3))+").png", result)
                print("Performance of ", sr_name, " ", sl_name, ": ", round(dsc, 3), "    Contour Difference: ",
                      round(cont_diff, 4), ",    Match Shape Result: ", hu_moment, "\n")
                cv2.imshow("Software Process for Analyzing Liver Cancer", result)
                # cv2.waitKey(0)
                print()

        print("\n\n\n")
        print("Task b is started.")
        set_ct_b, set_ct_b_seg = self.proceed_task1_b(set_ct_a_liver, set_ct_a_seg)
        for sr_name in list(set_ct_b_seg.keys()):
            try:
                shutil.rmtree("E:\\2. Project\\Python\\LiverDiseaseDetection\\process_result\\step1-b")
            except:
                pass
            os.mkdir("E:\\2. Project\\Python\\LiverDiseaseDetection\\process_result\\step1-b")
            os.mkdir("E:\\2. Project\\Python\\LiverDiseaseDetection\\process_result\\step1-b\\"+sr_name)
            for sl_name in list(set_ct_b_seg[sr_name].keys()):
                print(sr_name, sl_name)
                cv2.imwrite("E:\\2. Project\\Python\\LiverDiseaseDetection\\process_result\\step1-b\\"+sr_name+"\\"+sl_name.split(".")[0]+".png", set_ct_b[sr_name][sl_name])
                mask = set_ct_a_seg[sr_name][sl_name]['masks']
                mask = mask[:,:,0]
                mask = np.where(mask==True, 255, mask)
                mask = np.where(mask==False, 0, mask)
                mask = np.uint8(mask)
                result = set_ct_a_liver[sr_name][sl_name]
                ret, threshold = cv2.threshold(mask, 127, 255, cv2.THRESH_BINARY)
                contours, _ = cv2.findContours(threshold, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
                result = cv2.drawContours(result, contours, -1, (0, 255, 0), 2)
                cv2.imwrite("E:\\2. Project\\Python\\LiverDiseaseDetection\\process_result\\step1-b\\"+sr_name+"\\"+sl_name.split(".")[0]+"_mask.png", result)
                cv2.imshow("Software Process for Analyzing Liver Cancer", result)
                # cv2.waitKey(0)

        # set_ct_b_liver_seg = self.liver_seg_detector.segment_liver_region(set_ct_b)  # Task 3

        # return set_ct_b, set_ct_b_seg, set_ct_b_liver_seg

    def proceed_task1_a(self, set_ct_a):
        """
        To proceed task 1-a
        :param set_ct_a:
        :return:
        """
        t_start = time.time()
        set_ct_a_liver = {}
        set_ct_a_seg = {}
        list_a_sr_keys = list(set_ct_a.keys())
        for sr_name in list_a_sr_keys:
            set_ct_a_liver[sr_name] = {}
            set_ct_a_seg[sr_name] = {}
            list_a_sl_keys = list(set_ct_a[sr_name].keys())

            for sl_name in list_a_sl_keys:
                result = self.liver_segmentor.segment_liver(self.get_sl(list_a_sr_keys.index(sr_name), list_a_sl_keys.index(sl_name)))  # Task 1
                if len(result['roi']) == 0:  # If liver is not segmented
                    continue  # To discard data
                # If the liver region is segmented
                set_ct_a_liver[sr_name][sl_name] = self.set_ct_a[sr_name][sl_name]
                set_ct_a_seg[sr_name][sl_name] = result
        print("Elapsed Time of task 1-a: ", time.time()-t_start, "Sec.")
        return set_ct_a_liver, set_ct_a_seg

    def proceed_task1_b(self, set_ct_a_liver, set_ct_a_seg):
        """
        To proceed task 1-b
        :param set_ct_a_liver:
        :param set_ct_a_seg:
        :return:
        """
        t_start = time.time()
        set_ct_b = {}
        set_ct_b_seg = {}
        for sr_key in list(set_ct_a_liver.keys()):
            target_idxs = {"fir_minimum": {"area": np.inf, "index": -1}, "maximum": {"area": 0, "index": -1},
                           "last_minimum": {"area": np.inf, "index": -1}}
            set_ct_b[sr_key] = {}
            set_ct_b_seg[sr_key] = {}
            sl_keys = list(set_ct_a_liver[sr_key].keys())
            for sl_key in sl_keys:
                sl_seg = set_ct_a_seg[sr_key][sl_key]
                area = self.liver_segmentor.compute_area(sl_seg["masks"])

                # For Criteria 1, It could be changed
                if target_idxs["fir_minimum"]["area"] > area and target_idxs["maximum"]["area"] > area and target_idxs["last_minimum"]['area'] == np.inf: # First minimum value
                    target_idxs["fir_minimum"]["area"] = area
                    target_idxs["fir_minimum"]["index"] = sl_key
                    continue
                elif target_idxs["fir_minimum"]["area"] < area and target_idxs["maximum"]["area"] < area: # Maximum Value
                    target_idxs["maximum"]["area"] = area
                    target_idxs["maximum"]["index"] = sl_key
                    continue
                elif target_idxs["maximum"]["area"] < area < target_idxs["last_minimum"]["area"]: # Last Minimum Value
                    target_idxs["last_minimum"]['area'] = area
                    target_idxs["last_minimum"]["index"] = sl_key
                    continue

                # For Criteria 2
                cur_idx = sl_keys.index(sl_key)
                if cur_idx > 0:
                    rate = self.liver_segmentor.compute_overlap_rate(set_ct_a_seg[sr_key][sl_keys[cur_idx-1]], set_ct_a_seg[sr_key][sl_key])
                    if rate == 0:
                        continue

                set_ct_b[sr_key][sl_key] = self.set_ct_a[sr_key][sl_key]
                set_ct_b_seg[sr_key][sl_key] = sl_seg
            if target_idxs["last_minimum"]["index"] == -1:
                sl_seg = set_ct_a_seg[sr_key][sl_keys[-1]]
                area = self.liver_segmentor.compute_area(sl_seg["masks"])
                target_idxs["last_minimum"]['area'] = area
                target_idxs["last_minimum"]["index"] = sl_keys[-1]

            print(target_idxs)

            fir_idx = sl_keys.index(target_idxs["fir_minimum"]["index"])
            last_idx = sl_keys.index(target_idxs["last_minimum"]["index"])
            sb_keys = list(set_ct_b[sr_key].keys())
            for sb_key in sb_keys:
                cur_idx = sl_keys.index(sb_key)
                if not (fir_idx <= cur_idx <= last_idx):
                    del set_ct_b[sr_key][sb_key]
                    del set_ct_b_seg[sr_key][sb_key]

        print("Elapsed Time of task 1-b: ", time.time()-t_start, "Sec.")
        return set_ct_b, set_ct_b_seg

    def proceed_step_2(self, set_ct_b, set_ct_b_seg):
        """
        To proceed step 2's tasks
        :param set_ct_b: dict,
        :param set_ct_b_seg: dict,
        :return: set_ct_c_seg
        """
        result = self.lesion_segmentor.check_lesion_presence(set_ct_b_seg)
        if result:
            set_ct_c_seg = self.lesion_segmentor.segment_lesion(set_ct_b, set_ct_b_seg)
            return set_ct_c_seg
        else:
            return False # No lesions


if __name__ == '__main__':
    path_study = r"E:\1. Lab\Dataset\Liver\LiverCTCancerArchive\Custom\TCGA-DD-A1EL\01-16-2002-hi"
    # To define objects
    lirads_process = LIRADSProcess()

    # To initialize input dataset
    set_ct_a = {}

    for sr_name in os.listdir(path_study):
        path_sr = os.path.join(path_study, sr_name)

        set_ct_a[sr_name] = {}
        for sl_name in os.listdir(path_sr):
            sl = cv2.imread(os.path.join(path_sr, sl_name))
            set_ct_a[sr_name][sl_name] = sl

    # Step 1.
    lirads_process.proceed_step_1(set_ct_a)

